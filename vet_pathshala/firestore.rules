rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read/write their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null &&
                         request.auth.uid == userId;
      allow create: if request.auth != null;
    }

    // Questions - authenticated users can read, only admins can write
    match /questions/{questionId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
                   (request.auth.token.email.matches('.*@admin\\.vetpathshala\\.com') ||
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userRole == 'admin');
    }

    // Notes - authenticated users can read, only admins can write
    match /notes/{noteId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userRole == 'admin';
    }

    // Lectures - authenticated users can read, only admins can write
    match /lectures/{lectureId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userRole == 'admin';
    }

    // Battles - users can read all, write their own
    match /battles/{battleId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null &&
                            resource.data.creatorId == request.auth.uid;
    }

    // Subscriptions - users can only access their own
    match /subscriptions/{subscriptionId} {
      allow read, write: if request.auth != null &&
                         resource.data.userId == request.auth.uid;
      allow create: if request.auth != null;
    }

    // Coin Transactions - users can read their own, system can create
    match /coinTransactions/{transactionId} {
      allow read: if request.auth != null &&
                  resource.data.userId == request.auth.uid;
      allow create: if request.auth != null;
    }

  }
}